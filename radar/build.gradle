plugins {
    id 'base'
    id 'java'
    id 'java-library'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.1.1'
    id "com.jfrog.artifactory" version "4.25.2"
    id 'edu.wpi.first.wpilib.repositories.WPILibRepositoriesPlugin' version '2020.2'
    id 'edu.wpi.first.WpilibTools' version '1.0.0'
}

repositories {
    mavenCentral()
}
wpilibRepositories.addAllDevelopmentRepositories(project)



def nativeConfigName = 'wpilibNatives'
def nativeTasks = wpilibTools.createExtractionTasks {
    configurationName = nativeConfigName
    resourceFileName = "ResourceInformation-NetworkTables.json"
}
nativeTasks.addToSourceSetResources(sourceSets.main)

wpilibTools.deps.wpilibVersion = "2023.+"
def nativeConfig = configurations.create(nativeConfigName)
nativeConfig.dependencies.add wpilibTools.deps.wpilib('ntcore')
nativeConfig.dependencies.add wpilibTools.deps.wpilib("wpinet")
nativeConfig.dependencies.add wpilibTools.deps.wpilib("wpiutil")
nativeTasks.extractConfiguration.configure {
    it.skipWindowsHelperLibrary = true
}

dependencies {
    api "com.fasterxml.jackson.core:jackson-annotations:2.10.0"
    api "com.fasterxml.jackson.core:jackson-core:2.10.0"
    api "com.fasterxml.jackson.core:jackson-databind:2.10.0"
    api wpilibTools.deps.wpilibJava("ntcore")
    api wpilibTools.deps.wpilibJava("wpiutil")
}


def theMainClassName = "org.truher.radar.Main"
application {
    mainClass = theMainClassName
    applicationDefaultJvmArgs = [
            "-Xverify:none",
            "-Dprism.order=d3d,es2,sw"
    ]
}

import org.gradle.jvm.tasks.Jar
tasks.withType(Jar).configureEach {
    manifest {
        attributes["Implementation-Version"] = 0.1 as String
        attributes["Built-Date"] = Instant.now().toString()
        attributes["Main-Class"] = theMainClassName
    }
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
tasks.withType(ShadowJar).configureEach {
    archiveBaseName = "Radar"
    archiveVersion = ""
    exclude("module-info.class")
    archiveClassifier.set(wpilibTools.platformMapper.currentPlatform.platformName)
}

task copyAllOutputs(type: Copy) {
    destinationDir file("$buildDir/allOutputs")
}
build.dependsOn copyAllOutputs
def addTaskToCopyAllOutputs (task) {
    copyAllOutputs.dependsOn task
    copyAllOutputs.inputs.file task.archivePath
    copyAllOutputs.from task.archivePath
}
addTaskToCopyAllOutputs(shadowJar)

wrapper {
    gradleVersion = '7.5.1'
}